// DO NOT EDIT!! - This code has been generated by QueryUtilityProcessor
// Edit this file instead lavasrc/src/commonMain/kotlin/QueryUtils.kt
@file:Suppress(names = arrayOf("IncorrectFormatting", "INVISIBLE_REFERENCE"))

package dev.schlaubi.lavakord.plugins.lavasrc

import dev.arbjerg.lavalink.protocol.v4.LoadResult
import dev.schlaubi.lavakord.`internal`.QueryBuilder
import dev.schlaubi.lavakord.`internal`.taggedQuery
import dev.schlaubi.lavakord.audio.Node
import dev.schlaubi.lavakord.audio.player.PlayOptions
import dev.schlaubi.lavakord.audio.player.Player
import dev.schlaubi.lavakord.rest.loadItem
import kotlin.contracts.InvocationKind.EXACTLY_ONCE
import kotlin.contracts.contract

/**
 * Performs a track search and plays the result using [Spotify](https://spotify.com).
 */
public suspend fun Player.searchAndPlayUsingSpotify(
    query: String,
    options: SpotifySearchQueryBuilder = SpotifySearchQueryBuilder.Default,
    playOptionsBuilder: PlayOptions.() -> Unit = {},
) {
    contract { callsInPlace(playOptionsBuilder, EXACTLY_ONCE) }
    searchAndPlayTrack("spsearch:" + options.toQuery(query), playOptionsBuilder)
}

/**
 * Performs a track search using [Spotify](https://spotify.com).
 */
public suspend inline fun Node.searchUsingSpotify(query: String, builder: SpotifySearchQueryBuilder.() -> Unit = {}): LoadResult {
    contract { callsInPlace(builder, EXACTLY_ONCE) }
    val options = SpotifySearchQueryBuilder().apply(builder)
    return loadItem("spsearch:" + options.toQuery(query))
}

/**
 * Builder for Spotify search queries.
 */
@Suppress(names = arrayOf("MemberVisibilityCanBePrivate"))
public class SpotifySearchQueryBuilder : QueryBuilder {
    /**
     * Searches for results from a specific arist (Only works for album, artists and tracks)
     */
    public var artist: String? = null

    /**
     * Searches for results from within a specific range (eg.1955-1960) (Only works for album, artists and tracks)
     */
    public var year: String? = null

    /**
     * Searches for results containing a specific track (like Albums, Artists)
     */
    public var track: String? = null

    /**
     * Searches for albums with a specific upc
     */
    public var upc: String? = null

    /**
     * Searches for a specific track by it's isrc
     */
    public var isrc: String? = null

    /**
     * Searches for a specific track by it's isrc
     */
    public var tag: Tag? = null

    @PublishedApi
    @Suppress(names = arrayOf("INVISIBLE_MEMBER"))
    internal fun toQuery(query: String): String = taggedQuery("" to query, "artist" to artist, "year" to year, "track" to track, "upc" to upc, "isrc" to isrc, "tag" to tag)

    /**
     * Type of [Tag].
     */
    public enum class Tag(
        /**
         * The value used in queries
         */
        public val `value`: String,
    ) {
        /**
         * The `tag:new` filter will return albums released in the past two weeks
         */
        NEW("new"),
        /**
         * The `tag:hipster` can be used to return only albums with the lowest 10% popularity.
         */
        HIPSTER("hipster"),
        ;

        override fun toString(): String = value
    }

    public companion object {
        /**
         * An instance of the builder with default values
         */
        public val Default: SpotifySearchQueryBuilder = SpotifySearchQueryBuilder()
    }
}

/**
 * Creates a new [SpotifySearchQueryBuilder] and applies [builder] to it
 */
public inline fun spotifySearchQuery(builder: SpotifySearchQueryBuilder.() -> Unit): SpotifySearchQueryBuilder {
    contract { callsInPlace(builder, EXACTLY_ONCE) }
    return SpotifySearchQueryBuilder().apply(builder)
}

/**
 * Performs a track search and plays the result using [Yandex Music](https://music.yandex.ru).
 */
public suspend fun Player.searchAndPlayUsingYandexMusic(query: String, playOptionsBuilder: PlayOptions.() -> Unit = {}) {
    contract { callsInPlace(playOptionsBuilder, EXACTLY_ONCE) }
    searchAndPlayTrack("ymsearch:$query", playOptionsBuilder)
}

/**
 * Performs a track search using [Yandex Music](https://music.yandex.ru).
 */
public suspend fun Node.searchUsingYandexMusic(query: String): LoadResult = loadItem("ymsearch:$query")

/**
 * Performs a track search and plays the result using [Apple Music](https://music.apple.com).
 */
public suspend fun Player.searchAndPlayUsingAppleMusic(query: String, playOptionsBuilder: PlayOptions.() -> Unit = {}) {
    contract { callsInPlace(playOptionsBuilder, EXACTLY_ONCE) }
    searchAndPlayTrack("amsearch:$query", playOptionsBuilder)
}

/**
 * Performs a track search using [Apple Music](https://music.apple.com).
 */
public suspend fun Node.searchUsingAppleMusic(query: String): LoadResult = loadItem("amsearch:$query")

/**
 * Performs a track search and plays the result using [Deezer](https://deezer.com).
 */
public suspend fun Player.searchAndPlayUsingDeezer(query: String, playOptionsBuilder: PlayOptions.() -> Unit = {}) {
    contract { callsInPlace(playOptionsBuilder, EXACTLY_ONCE) }
    searchAndPlayTrack("dzsearch:$query", playOptionsBuilder)
}

/**
 * Performs a track search using [Deezer](https://deezer.com).
 */
public suspend fun Node.searchUsingDeezer(query: String): LoadResult = loadItem("dzsearch:$query")

/**
 * Performs a track search and plays the result using [Deezer](https://deezer.com).
 *
 * @param isrc The [ISRC](https://en.wikipedia.org/wiki/International_Standard_Recording_Code) of the song you want to play
 */
public suspend fun Player.loadAndPlayUsingDeezer(isrc: String, playOptionsBuilder: PlayOptions.() -> Unit = {}) {
    contract { callsInPlace(playOptionsBuilder, EXACTLY_ONCE) }
    searchAndPlayTrack("dzisrc:$isrc", playOptionsBuilder)
}

/**
 * Performs a track search using [Deezer](https://deezer.com).
 *
 * @param isrc The [ISRC](https://en.wikipedia.org/wiki/International_Standard_Recording_Code) of the song you want to play
 */
public suspend fun Node.loadUsingDeezer(isrc: String): LoadResult = loadItem("dzisrc:$isrc")
